# $Revision$
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
# (c) Tim Brown, 2012
# <mailto:timb@nth-dimension.org.uk>
# <http://www.nth-dimension.org.uk/> / <http://www.machine.org.uk/>

. lib/misc/stdio
. lib/misc/file
. lib/misc/privileged
. lib/misc/linker

binary_dependency_init () {
	stdio_message_log "binary_dependency" "Starting"
	file_check_or_generate_cache
}

binary_dependency_main () {
	privileged_list | while read type filename usergroupid
	do
		stdio_message_log "binary_dependency" "${filename} is ${type}, running as user/group ${usergroupid}"
		file_show_perms "${filename}" | while read filename permissions userid groupid
		do
			linker_list_dependencies "${filename}" | while read filename2
			do
				stdio_message_log "binary_dependency" "${filename} depends on ${filename2}"
				file_parent_traverse "${filename2}" | while read filename
				do
					if [ -e "${filename}" ]
					then
						if [ -h  "${filename}" ]
						then
							stdio_message_debug "binary_dependency" "${filename} is a symlink"
							# TODO chase the dragon (symlink)
						else
							file_show_perms "${filename}" | while read filename permissions userid groupid
							do
								stdio_message_warn "binary_dependency" "${filename} is run as user/group ${usergroupid} but owned by user ${userid}"
								stdio_message_warn "binary_dependency" "${filename} is run as user/group ${usergroupid} but owned by group ${groupid}"
								stdio_message_debug "binary_dependency" "${filename} (${userid}, ${groupid})=${permissions}"
								case "${permissions}" in
									?????w????|????????w?)
										stdio_message_warn "binary_dependency" "${filename} is run as user/group ${usergroupid} but is group or world writable"
										stdio_message_debug "binary_dependency" "${filename} (${userid}, ${groupid})=${permissions}"
										;;
								esac
							done
						fi
					else
						stdio_message_warn "binary_dependency" "${filename} is run as user/group ${usergroupid} but does not exist"
					fi
				done
			done
		done
	done
}

binary_dependency_fini () {
	stdio_message_log "binary_dependency" "Ending"
}