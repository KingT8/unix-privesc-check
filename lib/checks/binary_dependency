#!/bin/sh
# $Revision$
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
# (c) Tim Brown, 2012
# <mailto:timb@nth-dimension.org.uk>
# <http://www.nth-dimension.org.uk/> / <http://www.machine.org.uk/>
#
# Check for excessive permissions over privileged files and processes'
# linked libraries

. lib/misc/stdio
. lib/misc/file
. lib/misc/privileged
. lib/misc/linker

binary_dependency_init () {
	stdio_message_log "binary_dependency" "Starting"
}

binary_dependency_permissions () {
	pattern="${1}"
	file_show_nonsymlink_perms " ${pattern}$" | while read filename3 permissions userid groupid
	do
		case "${permissions}" in
			????????w? )
				stdio_message_warn "binary_dependency" "${filename3} is owned by user ${userid} (group ${groupid}) and is world-writable (${permissions})"
			;;
			?????w???? )
				if [ -n "`id -G -n | grep ${groupid}`" ]
				then
					stdio_message_warn "binary_dependency" "${filename3} is owned by user ${userid} (group ${groupid}: YOU) and is group-writable (${permissions})"
				else
					stdio_message_log "binary_dependency" "${filename3} is owned by user ${userid} (group ${groupid}) and is group-writable (${permissions})"
				fi
			;;
		esac
	done
}

binary_dependency_main () {
	privileged_list | while read type filename usergroupid
	do
		file_list_by_filename " ${filename}$" | while read filename2
		do
			linker_list_dependencies "${filename2}" | while read library
			do
				if [ ! -e "${library}" ]
				then
					stdio_message_warn "binary_dependency" "${filename2} depends on ${library} but this does not exist"
					continue
				fi

				if [ -h "${library}" ]
				then
					new_library="`file_show_symlinked_file "${library}"`"

					if [ -n "${new_library}" ]
					then
						#stdio_message_debug "binary_dependency" "${filename2} depends on ${library}, a symlink to ${new_library}"
						binary_dependency_permissions ${new_library}
					fi
				else
					binary_dependency_permissions ${library}
				fi
			done
		done
	done
}

binary_dependency_fini () {
	stdio_message_log "binary_dependency" "Ending"
}
