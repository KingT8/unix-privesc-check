#!/bin/sh
# $Revision$
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
# (c) Tim Brown, 2012
# <mailto:timb@nth-dimension.org.uk>
# <http://www.nth-dimension.org.uk/> / <http://www.machine.org.uk/>
#
# Check for write permissions over privileged files and processes'
# linked libraries

. lib/misc/stdio
. lib/misc/file
. lib/misc/privileged
. lib/misc/linker

binary_dependency_init () {
	stdio_message_log "binary_dependency" "Starting: `date`"
}

binary_dependency_permissions () {
	library="${1}"
	privfilename="${2}"
	filetype="${3}"
	echo "library beginning: $library (privfilename: $privfilename)" # FIXME remove debug line
	file_show_non_symlink_perms " ${library}$" | while read filename permissions userid groupid
	do
		echo "filename: ${filename}" # FIXME remove debug line
		# TODO for each vulnerable file it would be really useful to know HOW the program is run (setuid, from inetd, etc.) and WHO by (root:root, ptm:user, etc.)
		#      I think we will always know this because the concept of a file being "privileged" implies that we know how it is run + who by
		case "${permissions}" in
			????????w?)
				stdio_message_warn "binary_dependency" "${filetype} ${privfilename} depends on ${filename}, owned by user ${userid} (group ${groupid}) and is world-writable (${permissions})"
			;;
			?????w????)
				# TODO need option to supress this warning for empty groups.  Why?  pentesters+auditors might not care on existing servers (not exploitable).  However, if auditing
				#      a base-build where future group members aren't clear yet, the auditor WILL care.  Hence we need group-write for empty groups to be supressable.
				if [ -n "`id -G -n | grep ${groupid}`" ] # FIXME what if groupid is really short, like "a"?  The grep will match too much.  Note id outputs a single line.
				then
					stdio_message_warn "binary_dependency" "${filetype} ${privfilename} depends on ${filename}, owned by user ${userid} (group ${groupid}: YOU) and is group-writable (${permissions})"
				else
					stdio_message_log "binary_dependency" "${filetype} ${privfilename} depends on ${filename}, owned by user ${userid} (group ${groupid}) and is group-writable (${permissions})"
				fi
			;;
			# TODO need to check for write access by non-root users.  This will allow privesc from the user with write access to the user who runs the program which uses this lib.
		esac
	done
}

binary_dependency_main () {
	privileged_list | while read filetype filename usergroupid
	do
		# echo "Processing exe ${filename}"
		linker_list_dependencies "${filename}" | while read library
		do
			# echo "Processing lib ${library}"
			if [ ! -e "${library}" ]
			then
				stdio_message_warn "binary_dependency" "${filetype} ${filename} depends on ${library}, but this does not exist"
				# TODO This is only a security issue if an attacker can create it.  Check parent paths for write access.
				continue
			fi

			if [ -h "${library}" ]
			then
				linkedlibrary="`file_show_symlinked_filename "${library}"`"

				if [ -n "${linkedlibrary}" ]
				then
					#stdio_message_debug "binary_dependency" "${filetype} ${filename} depends on ${library}, a symlink to ${linkedlibrary}"
					binary_dependency_permissions "${linkedlibrary}" "${filename}" "${filetype}"
				else
					# echo "We failed to handle symlink-to-symlink for: ${library}" # uncomment this to see a bug # FIXME
				fi
			else
				binary_dependency_permissions "${library}" "${filename}" "${filetype}"
			fi
		done
	done
}

binary_dependency_fini () {
	stdio_message_log "binary_dependency" "Ending: `date`"
}
