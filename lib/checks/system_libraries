#!/bin/sh
# $Revision$
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
# (c) Tim Brown, 2012
# <mailto:timb@nth-dimension.org.uk>
# <http://www.nth-dimension.org.uk/> / <http://www.machine.org.uk/>
#
# List group-writable and world-writable all system libraries and their
# parent directories

. lib/misc/stdio
. lib/misc/file
. lib/misc/linker
. lib/misc/inetd
. lib/misc/process

system_libraries_init () {
	stdio_message_log "system_libraries" "Starting"
	file_check_or_generate_cache
}

system_libraries_permissions () {
	pattern="${1}"
	file_show_non_symlink_perms " ${pattern}" | while read filename permissions userid groupid
	do
		file_parent_traverse "${filename}" | while read filename
		do
			case "${permissions}" in
				????????w?)
					stdio_message_warn "system_libraries" "${filename} is owned by user ${userid} (group ${groupid}) and is world-writable (${permissions})"
				;;
				?????w????)
					if [ -n "`id -G -n | grep ${groupid}`" ]
					then
						stdio_message_warn "system_libraries" "${filename} is owned by user ${userid} (group ${groupid}: YOU) and is group-writable (${permissions})"
					else
						stdio_message_log "system_libraries" "${filename} is owned by user ${userid} (group ${groupid}) and is group-writable (${permissions})"
					fi
				;;
			esac
		done
	done
}

system_libraries_main () {
	linker_list_system_filenames | while read filename
	do
		if [ ! -e "${filename}" ]
		then
			stdio_message_warn "system_libraries" "${filename} does not exist"
		fi

		if [ -h "${filename}" ]
		then
			newfilename="`file_show_symlinked_filename "${filename}"`"

			if [ -n "${newfilename}" ]
			then
				#stdio_message_debug "system_libraries" "${filename} is a symlink to ${newfilename}"
				system_libraries_permissions "${newfilename}"
			fi
		else
			system_libraries_permissions "${filename}"
		fi

		# relative paths always end up at . with dirname, at which point we flag the relative path and set filename to / to terminate the loop
		if [ "${filename}" = "." -o "${filename}" = "\$ORIGIN" ]
		then
			stdio_message_warn "binary_rpath" "${filename} is relative"
			filename="/"
		fi
	done
}

system_libraries_fini () {
	stdio_message_log "system_libraries" "Ending"
}
