#!/bin/sh
# $Revision$
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
# (c) Tim Brown, 2012
# <mailto:timb@nth-dimension.org.uk>
# <http://www.nth-dimension.org.uk/> / <http://www.machine.org.uk/>
#
# Check for write permissions over privileged files and processes'
# linked libraries

. lib/misc/file
. lib/misc/group
. lib/misc/linker
. lib/misc/privileged
. lib/misc/stdio
. lib/misc/user

binary_dependency_init () {
	stdio_message_log "binary_dependency" "Starting: `date`"
}

binary_dependency_traverse () {
	pattern="${1}"
	privfilename="${2}"
	filetype="${3}"
	library="${4}"
	pathtype="${5}"
	echo "binary_dependency_traverse called for ${library}"
	file_parent_traverse "${pattern}" | while read filename
	do
		# /etc/ld.so.conf.d/ files can contain files which we are not interested here, only directories
		if [ ! -d "${filename}" ]
		then
			continue
		fi

		file_show_non_symlink_perms " ${filename}$" | while read filepath permissions userid groupid
		do
			#echo "Checking permissions of filepath ${filepath} ($permissions)"
			case "${permissions}" in
				????????w?)
					stdio_message_warn "binary_dependency" "${filetype} ${privfilename} depends on ${library}, but this does not exist - ${pathtype} ${filepath} is owned by user ${userid} (group ${groupid}) and is world-writable (${permissions})"
					;;
				?????w????)
					# TODO need option to supress this warning for empty groups.  Why?  pentesters+auditors might not care on existing servers (not exploitable).  However, if auditing
					#      a base-build where future group members aren't clear yet, the auditor WILL care.  Hence we need group-write for empty groups to be supressable.
					if [ "`group_is_in_group_name \"${groupid}\"`" -eq 1 ]
					then
						stdio_message_warn "binary_dependency" "${filetype} ${privfilename} depends on ${library}, but this does not exist - ${pathtype} ${filepath} is owned by user ${userid} (group ${groupid}: YOU) and is group-writable (${permissions})"
					else
						stdio_message_log "binary_dependency" "${filetype} ${privfilename} depends on ${library}, but this does not exist - ${pathtype} ${filepath} is owned by user ${userid} (group ${groupid}) and is group-writable (${permissions})"
					fi
					;;
				??w???????)
					if [ "`user_is_user_root \"${userid}\"`" -eq 1 ]
					then
						stdio_message_log "binary_dependency" "${filetype} ${privfilename} depends on ${library}, but this does not exist - ${pathtype} ${filepath} is owned by user ${userid} (group ${groupid}), non-root user (${permissions})"
					fi
					;;
			esac
		done
	done
}

binary_dependency_permissions () {
	library="${1}"
	privfilename="${2}"
	filetype="${3}"
	echo "binary_dependency_permissions called for ${library}"
	file_show_non_symlink_perms " ${library}$" | while read filename permissions userid groupid
	do
		echo "Checking permissions for filename ${filename} ($permissions)"
		case "${permissions}" in
			????????w?)
				stdio_message_warn "binary_dependency" "${filetype} ${privfilename} depends on ${filename}, this is owned by user ${userid} (group ${groupid}) and is world-writable (${permissions})"
				;;
			?????w????)
				# TODO need option to supress this warning for empty groups.  Why?  pentesters+auditors might not care on existing servers (not exploitable).  However, if auditing
				#      a base-build where future group members aren't clear yet, the auditor WILL care.  Hence we need group-write for empty groups to be supressable.
				if [ "`group_is_in_group_name \"${groupid}\"`" -eq 1 ]
				then
					stdio_message_warn "binary_dependency" "${filetype} ${privfilename} depends on ${filename}, this is owned by user ${userid} (group ${groupid}: YOU) and is group-writable (${permissions})"
				else
					stdio_message_log "binary_dependency" "${filetype} ${privfilename} depends on ${filename}, this is owned by user ${userid} (group ${groupid}) and is group-writable (${permissions})"
				fi
				;;
			??w???????)
				if [ "`user_is_user_root \"${userid}\"`" -eq 1 ]
				then
					stdio_message_log "binary_dependency" "${filetype} ${privfilename} depends on ${filename}, this is owned by user ${userid} (group ${groupid}), non-root user (${permissions})"
				fi
				;;
		esac
	done
}

binary_dependency_main () {
	privileged_list | while read filetype filename usergroupid
	do
		echo "Processing ${filetype} ${filename}"
		linker_list_dependencies "${filename}" | while read library
		do
			echo "Processing library ${library}"
			# when the library needed by the program does not exist, ldd returns "not found" - i.e. "	libname.so.2 => not found", however the following if condition is cautious and checks both if the file exist and if the ldd output returned not found (hence the linker library returned the library relative path (relativelibrary)
			if [ ! -e "${library}" -o -n "`printf -- \"${library}\" | grep -v \"^/\"`" ]
			then
				#echo "-e ${library}"
				case "${library}" in
					# if the library is a absolute file path, we check for write permissions on its parent directories
					/*)
						binary_dependency_traverse "${library}" "${filename}" "${filetype}" "${library}" "parent path"
						;;
					# if the library is a relative file path, we check for write permissions on all system libraries file paths
					*)
						linker_list_system_filenames | while read filepath
						do
							binary_dependency_traverse "${filepath}" "${filename}" "${filetype}" "${library}" "system library path"
						done
						;;
				esac
				continue
			#else
				#echo "Not -e ${library}"
			fi


			if [ -h "${library}" ]
			then
				linkedlibrary="`file_show_symlinked_filename "${library}"`"
				echo "linkedlibrary=${linkedlibrary}"

				if [ -n "${linkedlibrary}" ]
				then
					#stdio_message_debug "binary_dependency" "${filetype} ${filename} depends on ${library}, a symlink to ${linkedlibrary}"
					#echo "-h ${library} and -n ${linkedlibrary}"
					binary_dependency_permissions "${linkedlibrary}" "${filename}" "${filetype}"
				else
					echo "-h ${library} but not -n ${linkedlibrary}"
				fi
			else
				#echo "Not -h ${library}"
				binary_dependency_permissions "${library}" "${filename}" "${filetype}"
			fi
		done
	done
}

binary_dependency_fini () {
	stdio_message_log "binary_dependency" "Ending: `date`"
}
