# $Revision$
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
# (c) Tim Brown, 2012
# <mailto:timb@nth-dimension.org.uk>
# <http://www.nth-dimension.org.uk/> / <http://www.machine.org.uk/>

. lib/misc/file
. lib/misc/inetd
. lib/misc/process

privileged_init () {
	file_check_or_generate_cache
}

privileged_list () {
	for pattern in "-??s??????" "-??S??????"
	do
		file_list_by_perm "${pattern}" | while read filename
		do
			file_show_perms "${filename}" | while read filename permissions userid groupid
			do
				printf "setuid ${filename} ${userid}\n"
			done
		done
	done
	for pattern in "-?????s???" "-?????S???"
	do
		file_list_by_perm "${pattern}" | while read filename
		do
			file_show_perms "${filename}" | while read filename permissions userid groupid
			do
				printf "setgid ${filename} ${setgid}\n"
			done
		done
	done
	inetd_list ".*" | while read portnumber
	do
		privilegedfilename="`inetd_show_command "${portnumber}"`"
		file_show_real_filename "${privilegedfilename}" | while read filename
		do
			userid="`inetd_show_userid "${portnumber}"`"
			printf "inetd ${filename} ${userid}\n"
		done
		privilegedarguments="`inetd_show_arguments "${portnumber}"`"
		file_show_real_filename "${privilegedarguments}" | while read filename
		do
			userid="`inetd_show_userid "${portnumber}"`"
			printf "inetd-argument ${filename} ${userid}\n"
		done
	done
	process_list ".*" | while read processid
	do
		filename="`process_show_command "${processid}"`"
		if [ -z "${filename}" ]
		then
			continue
		fi
		file_show_real_filename "${filename}" | while read filename
		do
			if [ -n "${filename}" ]
			then
				userid="`process_show_userid "${processid}"`"
				printf "running ${filename} ${userid}\n"
			fi
		done
	done
	# TODO still need to add similar checks for stuff spawned from init or cron, which has fscaps, or binds a listening port not via inetd
}

# TODO what we really need is a privileged_matches function for binary_dependency etc

privileged_init