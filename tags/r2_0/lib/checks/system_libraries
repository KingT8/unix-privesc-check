# $Revision$
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
# (c) Tim Brown, 2012
# <mailto:timb@nth-dimension.org.uk>
# <http://www.nth-dimension.org.uk/> / <http://www.machine.org.uk/>

. lib/misc/stdio
. lib/misc/file
. lib/misc/linker
. lib/misc/inetd
. lib/misc/process

system_libraries_init () {
	stdio_message_log "system_libraries" "Starting"
}

system_libraries_traverse () {
	filename="$1"
	filerunasuserid="$2"
	filerunasgroupid="$2"
	# start with the dependency itself and then use dirname to find the parent directory
	while [ "${filename}" != "/" ]
	do
		file_show_perms "${filename}" | while read filename filepermissions fileuserid filegroupid
		do
			if [ "${filerunasuserid}" != "" ]
			then
				stdio_message_warn "system_libraries" "${filename} is run as user ${filerunasuserid} but owned by user ${fileuserid}"
				stdio_message_debug "system_libraries" "${filename} (${fileuserid}, ${filegroupid})=${filepermissions}"
			else
				if [ "${filerunasgroupid}" != "" ]
				then
					stdio_message_warn "system_libraries" "${filename} is run as group ${filerunasgroupid} but owned by group ${filegroupid}"
					stdio_message_debug "system_libraries" "${filename} (${fileuserid}, ${filegroupid})=${filepermissions}"
				fi
			fi
			case "${filepermissions}" in
				?????w????|????????w?)
					if [ "${filerunasuserid}" != "" ]
					then
						stdio_message_warn "system_libraries" "${filename} is run as user ${filerunasuserid} but may be group or world writable"
						stdio_message_debug "system_libraries" "${filename} (${fileuserid}, ${filegroupid})=${filepermissions}"
					else
						if [ "${filerunasgroupid}" != "" ]
						then
							# while it should be obvious why allowing o+w is bad, the case not not allowing g+w less clear cut, again my thinking is that with the privileges of the setgid binary it should not be possible to modify dependencies otherwise it may be possible to turn repurpose it... we should probably check for g+ws binaries too, this falls somewhere between setgid and group_writable... i'll change 
							stdio_message_warn "system_libraries" "${filename} is run as group ${filerunasgroupid} but may be group or world writable"
							stdio_message_debug "system_libraries" "${filename} (${fileuserid}, ${filegroupid})=${filepermissions}"
						fi
					fi
					;;
			esac
		done
		# find the parent directory
		filename="`dirname ${filename}`"
	done

}

system_libraries_main () {
	linker_list_system_filenames | while read filename
	do
		system_libraries_traverse "${filename}" "anyone"  "anyone"
	done
}

system_libraries_fini () {
	stdio_message_log "system_libraries" "Ending"
}
