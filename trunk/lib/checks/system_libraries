# $Revision$
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
# (c) Tim Brown, 2012
# <mailto:timb@nth-dimension.org.uk>
# <http://www.nth-dimension.org.uk/> / <http://www.machine.org.uk/>

. lib/misc/stdio
. lib/misc/file
. lib/misc/linker
. lib/misc/inetd
. lib/misc/process

system_libraries_init () {
	stdio_message_log "system_libraries" "Starting"
	file_check_or_generate_cache
}

system_libraries_main () {
	linker_list_system_filenames | while read filename
	do
		file_parent_traverse "${filename}" | while read filename
		do
			if [ -e "${filename}" ]
			then
				if [ -h  "${filename}" ]
				then
					stdio_message_debug "system_libraries" "${filename} is a symlink"
					# TODO chase the dragon (symlink)
				else
					file_show_perms "${filename}" | while read filename permissions userid groupid
					do
						stdio_message_warn "system_libraries" "${filename} is run as user/group ${usergroupid} but owned by user ${userid}"
						stdio_message_warn "system_libraries" "${filename} is run as user/group ${usergroupid} but owned by group ${groupid}"
						stdio_message_debug "system_libraries" "${filename} (${userid}, ${groupid})=${permissions}"
						case "${permissions}" in
							?????w????|????????w?)
								stdio_message_warn "system_libraries" "${filename} is run as user/group ${usergroupid} but is group or world writable"
								stdio_message_debug "system_libraries" "${filename} (${userid}, ${groupid})=${permissions}"
								;;
						esac
					done
				fi
			else
				stdio_message_warn "system_libraries" "${filename} is run as user/group ${usergroupid} but does not exist"
			fi
			# relative paths always end up at . with dirname, at which point we flag the relative path and set filename to / to terminate the loop
			if [ "${filename}" = "." -o "${filename}" = "\$ORIGIN" ]
			then
				stdio_message_warn "binary_rpath" "${filename} is run as user/group ${usergroupid} but is relative"
				filename="/"
			fi
		done
	done
}

system_libraries_fini () {
	stdio_message_log "system_libraries" "Ending"
}