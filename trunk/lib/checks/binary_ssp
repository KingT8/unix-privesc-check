# $Revision$
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
# (c) Tim Brown, 2012
# <mailto:timb@nth-dimension.org.uk>
# <http://www.nth-dimension.org.uk/> / <http://www.machine.org.uk/>
#
# Based on ideas found at http://people.redhat.com/sgrubb/security/

. lib/misc/stdio
. lib/misc/file
. lib/misc/binary
. lib/misc/inetd
. lib/misc/process

binary_ssp_init () {
	stdio_message_log "binary_ssp" "Starting"
}

binary_ssp_main () {
	file_check_or_generate_cache
	for permissionspattern in "-??s??????" "-??S??????"
	do
		file_list_by_perm "${permissionspattern}" | while read filename
		do
			stdio_message_log "binary_ssp" "${filename} is setuid"
			if [ "`binary_matches_function "${filename}" "__stack_chk_fail"`" -ne 1 ]
			then
				stdio_message_warn "binary_ssp" "${filename} is not compiled with SSP"
			fi
		done
	done
	for permissionspattern in "-?????s???" "-?????S???"
	do
		file_list_by_perm "${permissionspattern}" | while read filename
		do
			stdio_message_log "binary_ssp" "${filename} is setgid"
			if [ "`binary_matches_function "${filename}" "__stack_chk_fail"`" -ne 1 ]
			then
				stdio_message_warn "binary_ssp" "${filename} is not compiled with SSP"
			fi
		done
	done
	inetd_list ".*" | while read portnumber
	do
		filename="`inetd_show_command "${portnumber}"`"
		stdio_message_log "binary_ssp" "${filename} is spawned by inetd"
		filename="`file_show_real_filename "${filename}"`"
		if [ "${filename}" != "" ]
		then
			if [ "`binary_matches_function "${filename}" "__stack_chk_fail"`" -ne 1 ]
			then
				stdio_message_warn "binary_ssp" "${filename} is not compiled with SSP"
			fi
		fi
		filename="`inetd_show_arguments "${portnumber}"`"
		stdio_message_log "binary_ssp" "${filename} is spawned by inetd"
		filename="`file_show_real_filename "${filename}"`"
		if [ "${filename}" != "" ]
		then
			if [ "`binary_matches_function "${filename}" "__stack_chk_fail"`" -ne 1 ]
			then
				stdio_message_warn "binary_ssp" "${filename} is not compiled with SSP"
			fi
		fi
	done
	process_list ".*" | while read processid
	do
		filename="`process_show_command "${processid}"`"
		if [ "${filename}" = "" ]
		then
			continue
		fi
		stdio_message_log "binary_ssp" "${filename} is running"
		filename="`file_show_real_filename "${filename}"`"
		if [ "${filename}" != "" ]
		then
			if [ "`binary_matches_function "${filename}" "__stack_chk_fail"`" -ne 1 ]
			then
				stdio_message_warn "binary_ssp" "${filename} is not compiled with SSP"
			fi
		fi
	done
	# TODO still need to add similar checks for stuff spawned from init or cron or which has fscaps
}

binary_ssp_fini () {
	stdio_message_log "binary_ssp" "Ending"
}
